@using Pocus.Application.Dto
@using Newtonsoft.Json
@using System.Collections.Generic

@model PlanModel

@section Style {
    <link rel="stylesheet" href="~/css/tasks/tasks.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/tasks/modal.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/tasks/buttons.css" asp-append-version="true">
    <link rel="stylesheet" href="~/css/tasks/scrollbar.css" asp-append-version="true">
}

<div class="center-blocks" id="centerBlocks">
    <div class="add-task-panel">
        <button class="add-task-button">New plan set</button>
    </div>

    <div class="tasks-panel">
        @if (Model.Plans == null || Model.Plans.Count() == 0)
        {
            <p>There are no plans yet</p>
        }
        else
        {
            foreach (var plan in Model.Plans)
            {
                @Html.Raw(RenderPlanBlock(plan))
            }
        }
    </div>

    <div class="modal" id="newPlan">
        <div class="modal-block task-block" id="newPlanBlock">
            <h3 contenteditable="true" id="taskTitle">Plan name</h3>
            <button class="action-button pin-button" onclick="togglePin('pinButton')" id="pinButton">
                <img src="~/images/pin.png" alt="pin">
            </button>
            <hr>
            <div class="text-container">
                <div class="done-toggle" id="taskContentContainer">
                    <input type="checkbox" id="breakToggle" disabled />
                    <p contenteditable="true">Task body</p>
                    <button class="delete-toggle-button"
                            onclick="deleteToggle('taskContentContainer')">
                        ✖
                    </button>
                </div>
                <button class="add-content-button">Add line</button>
            </div>
            <button class="action-button first-button" onclick="notificationTask('newPlanBlock')"
                    id="notificationButton" title="Notification">
                <img src="~/images/notification.png" alt="notification">
            </button>
            <button class="save-task-button">Save Changes</button>
        </div>
    </div>

    <div class="modal" id="updateTask">
        <div class="modal-block task-block" id="updateTaskBlock">
        </div>
    </div>
</div>

@functions {
    string RenderPlanBlock(PlanDto plan)
    {
        var taskBlock = new System.Text.StringBuilder();
        taskBlock.Append($"<div class='task-block' id='block{plan.Id}'>");
        taskBlock.Append($"<h3>{plan.Title}</h3>");
        taskBlock.Append("<hr>");
        taskBlock.Append($"<button class='action-button pin-button {(plan.IsPinned ? "pinned" : "")}' id='pin{plan.Id}' onclick='saveTogglePin(\"pin{plan.Id}\")'>");
        taskBlock.Append("<img src='/images/pin.png' alt='pin'>");
        taskBlock.Append("</button>");
        if (plan.Text is not null)
        {
            taskBlock.Append(FillTextContainer(plan.Text));
        }
        taskBlock.Append("</div>");

        return taskBlock.ToString();
    }

    string FillTextContainer(string text)
    {
        var textContainer = new System.Text.StringBuilder();
        textContainer.Append("<div class='text-container'>");

        var objectContentArray = JsonConvert.DeserializeObject<List<PlanText>>(text);

        foreach (var objectContent in objectContentArray)
        {
            var doneToggleElement = new System.Text.StringBuilder();
            doneToggleElement.Append("<div class='done-toggle'>");
            doneToggleElement.Append($"<input type='checkbox' id='breakToggle' {(objectContent.IsDone ? "checked" : "")} disabled>");
            doneToggleElement.Append($"<p contenteditable='false' {(objectContent.IsDone ? "class='line-through'" : "")}>{objectContent.Text}</p>");
            doneToggleElement.Append("</div>");

            textContainer.Append(doneToggleElement);
        }

        textContainer.Append("</div>");

        return textContainer.ToString();
    }
}

@section Scripts {
    <script src="~/js/tasksAndNotes/common.js" asp-append-version="true"></script>
    <script src="~/js/tasksAndNotes/tasks.js" asp-append-version="true"></script>
    <script src="~/js/tasksAndNotes/tasksRequests.js" asp-append-version="true"></script>
}